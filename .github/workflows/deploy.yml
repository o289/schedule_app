name: Deploy to VPS with Backup and Rollback (Image Tag)

on:
  push:
    branches:
      - main

jobs:
  deploy: 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1. Secretsから.env.prodを生成（改行を保持）
      - name: Create local .env.prod from secrets
        run: |
          cat <<'EOF' > .env.prod
          ${{ secrets.ENV_PROD_FILE }}
          EOF
      # env.prodをプロジェクトにコピー
      - name: Copy .env.prod to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: ".env.prod"
          target: "/home/${{ secrets.VPS_USER }}/schedule_app/"

      # 2. DBバックアップ
      - name: Backup DB before deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          # 致命的: DBバックアップ失敗はデプロイ失敗に直結するため
          script: |
            cd /home/${{ secrets.VPS_USER }}/schedule_app || exit 0
            mkdir -p backups

            echo "🔄 Restarting DB container to ensure env is loaded..."
            docker compose -f docker-compose.prod.yml up -d db

            echo "💾 Taking database backup..."
            docker compose -f docker-compose.prod.yml exec -T db \
              pg_dump -U "$POSTGRES_USER" "$POSTGRES_DB" > backups/backup_$(date +%F_%H-%M).sql

      
      # 3. リポジトリを配置 or 更新
      - name: Ensure repo exists on VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          # 致命的: リポジトリの状態が正しくないとデプロイできないため
          script: |
            cd /home/${{ secrets.VPS_USER }}
            if [ ! -d "schedule_app" ]; then
              echo "📥 Cloning repository..."
              git clone https://github.com/o289/schedule_app.git
            else
              echo "🔄 Updating repository..."
              cd schedule_app
              git fetch origin
              git reset --hard origin/main
            fi

      # 4. デプロイ（frontendコンテナを完全に作り直し）
      - name: Deploy App (with no-cache build + rollback check)
        id: deploy-step
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          # 致命的: デプロイ失敗時はロールバックを行うため
          script: |
            cd /home/${{ secrets.VPS_USER }}/schedule_app
            
            echo "🔨 Build nginx image (no-cache)..."
            docker compose -f docker-compose.prod.yml build --no-cache nginx

            echo "🚀 Start nginx with new image..."
            docker compose -f docker-compose.prod.yml up -d

            echo "🔍 Check dist contents in nginx..."
            if ! docker exec schedule_app-nginx-1 ls -la /usr/share/nginx/html >/dev/null 2>&1; then
              echo "⚠️ Dist folder not found. Rolling back ALL app containers (DB is preserved)..."

              BACKUP_DIR=image_backups
              BACKEND_IMAGE=$(ls -t ${BACKUP_DIR}/backend_*.tar 2>/dev/null | head -n1)
              NGINX_IMAGE=$(ls -t ${BACKUP_DIR}/nginx_*.tar 2>/dev/null | head -n1)

              if [ -f "$BACKEND_IMAGE" ] && [ -f "$NGINX_IMAGE" ]; then
                docker load -i "$BACKEND_IMAGE"
                docker load -i "$NGINX_IMAGE"

                # DBコンテナは止めずに、アプリケーションだけ再起動
                docker compose -f docker-compose.prod.yml stop backend nginx frontend || true
                docker compose -f docker-compose.prod.yml rm -f backend nginx frontend || true
                docker compose -f docker-compose.prod.yml up -d --no-build

                echo "✅ Rolled back to stable version (DB preserved)."
              else
                echo "❌ No backup images found. Manual intervention required!"
                exit 1
              fi
            else
              echo "✅ Deployment successful. All containers running with new images."
            fi

      # 5. 失敗時のログ収集
      - name: Collect docker logs on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          # 補助的: ログ収集失敗は致命的ではないため継続可能
          script: |
            cd /home/${{ secrets.VPS_USER }}/schedule_app
            docker compose -f docker-compose.prod.yml logs --tail=200 > deploy-error.log

      - name: Download error logs from VPS
        if: failure()
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "/home/${{ secrets.VPS_USER }}/schedule_app/deploy-error.log"
          target: "./logs/"
        # 補助的: ログダウンロード失敗は致命的ではないため継続可能

      - name: Upload logs as artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: deploy-error-logs
          path: logs/deploy-error.log
        # 補助的: アップロード失敗は致命的ではないため継続可能

      # 6. 失敗時のロールバック（前の安定版に戻す）
      - name: Rollback to previous image
        if: failure()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          # 致命的: ロールバック失敗はアプリ継続稼働に直結するため必須
          script: |
            cd /home/${{ secrets.VPS_USER }}/schedule_app
            echo "🚨 Deployment failed. Rolling back..."

            BACKUP_DIR=image_backups
            BACKEND_IMAGE=$(ls -t ${BACKUP_DIR}/backend_*.tar 2>/dev/null | head -n1)
            NGINX_IMAGE=$(ls -t ${BACKUP_DIR}/nginx_*.tar 2>/dev/null | head -n1)

            if [ -f "$BACKEND_IMAGE" ]; then
              echo "🔄 Loading backend image from backup: $BACKEND_IMAGE"
              docker load -i "$BACKEND_IMAGE"
            else
              echo "⚠️ No backend backup image found."
            fi

            if [ -f "$NGINX_IMAGE" ]; then
              echo "🔄 Loading nginx image from backup: $NGINX_IMAGE"
              docker load -i "$NGINX_IMAGE"
            else
              echo "⚠️ No nginx backup image found."
            fi

            echo "🛑 Stopping backend and nginx containers..."
            docker compose -f docker-compose.prod.yml stop backend nginx || true

            echo "🗑️ Removing backend and nginx containers..."
            docker compose -f docker-compose.prod.yml rm -f backend nginx || true

            echo "🚀 Starting backend and nginx containers with restored images..."
            docker compose -f docker-compose.prod.yml up -d --no-build backend nginx

            echo "✅ Rollback completed. Backend and nginx containers restored. DB container is preserved."

      # 7. 成功時にイメージを保存（latestイメージをtarアーカイブ化）
      - name: Save Docker images on success
        if: success()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          # 補助的: イメージ保存失敗は致命的ではないため継続可能
          script: |
            cd /home/${{ secrets.VPS_USER }}/schedule_app
            mkdir -p image_backups
            docker save -o image_backups/backend_$(date +%F).tar schedule_app-backend:latest
            docker save -o image_backups/nginx_$(date +%F).tar schedule_app-nginx:latest
            ls -lh image_backups/