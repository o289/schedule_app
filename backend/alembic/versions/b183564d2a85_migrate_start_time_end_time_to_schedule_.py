"""migrate start_time/end_time to schedule_dates

Revision ID: b183564d2a85
Revises: c7fccc7971a8
Create Date: 2025-09-21 11:44:25.993678

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b183564d2a85'
down_revision: Union[str, Sequence[str], None] = 'c7fccc7971a8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    import sys
    from sqlalchemy import text

    op.create_table(
        'schedule_dates',
        sa.Column('schedule_id', sa.UUID(), nullable=False),
        sa.Column('start_date', sa.DateTime(), nullable=True),
        sa.Column('end_date', sa.DateTime(), nullable=True),
        sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.ForeignKeyConstraint(['schedule_id'], ['schedules.id']),
        sa.PrimaryKeyConstraint('id')
    )

    # Data migration with safety checks
    conn = op.get_bind()
    try:
        # Insert from schedules to schedule_dates
        conn.execute(text("""
            INSERT INTO schedule_dates (schedule_id, start_date, end_date)
            SELECT id, start_time, end_time
            FROM schedules;
        """))

        # Count check: number of rows in schedules vs schedule_dates
        schedules_count = conn.execute(text("SELECT COUNT(*) FROM schedules;")).scalar()
        schedule_dates_count = conn.execute(text("SELECT COUNT(*) FROM schedule_dates;")).scalar()
        if schedules_count != schedule_dates_count:
            raise Exception(f"Data migration error: schedules count ({schedules_count}) != schedule_dates count ({schedule_dates_count})")

        # Delete old schedules with NULL data (after migration and check)
        conn.execute(text("""
            DELETE FROM schedules WHERE start_time IS NULL OR end_time IS NULL;
        """))

        # Enforce NOT NULL constraints
        op.alter_column("schedule_dates", "start_date", nullable=False)
        op.alter_column("schedule_dates", "end_date", nullable=False)

        op.drop_column('schedules', 'start_time')
        op.drop_column('schedules', 'end_time')
    except Exception as e:
        print(f"Migration failed: {e}", file=sys.stderr)
        raise
    # ### end Alembic commands ###

    


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('schedules', sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('schedules', sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))

    op.execute("""
        UPDATE schedules s
        SET start_time = sd.start_date,
            end_time = sd.end_date
        FROM schedule_dates sd
        WHERE s.id = sd.schedule_id
    """)

    op.drop_table('schedule_dates')
    # ### end Alembic commands ###
